/**
 * Created by zahmed on 16-Jan-15.
 *
 * Description:
 * - This script is responsible for exporting fulfillment to Magento store as Shipment
 * -
 * Referenced By:
 * -
 * Dependency:
 * - Script Parameters:
 *   -
 * -
 * - Script Id:
 *   - customscript_magento_item_sync_sch
 * -
 * - Deployment Id:
 *   - customdeploy_magento_item_sync_sch
 * -
 * - Scripts:
 *   - folio3ConnectorLicenseVerification.js
 *   - mc_sync_constants.js
 *   - f3_inventory_sync_script_dao.js
 *   - f3_utility_methods.js
 *   - f3mg_connector_constants.js
 *   - f3mg_connector_common.js
 *   - f3mg_xml_utility.js
 *   - f3_external_system_config_dao.js
 *   - f3_client_factory.js
 *   - f3mg_ns_mg_shipping_methods_map_dao.js
 */

var FulfillmentExportHelper = (function () {
    return {
        // userevent start: creating shipment in Magento
        setShipmentIdInFulfillment: function (shipmentId, trackingNumbersIdsStr) {
            var rec = nlapiLoadRecord(nlapiGetRecordType(), nlapiGetRecordId(), null);
            rec.setFieldValue(ConnectorConstants.Transaction.Fields.MagentoShipmentId, shipmentId + '');
            rec.setFieldValue(ConnectorConstants.Transaction.Fields.MagentoStore, ConnectorConstants.CurrentStore.systemId);
            rec.setFieldValue(ConnectorConstants.Transaction.Fields.TrackingNumberIds, trackingNumbersIdsStr);
            nlapiSubmitRecord(rec);
        },

        /**
         * Export Fulfillment
         * @param sessionID
         * @param magentoSO
         * @param fulfillRec
         * @return {*|{status: boolean, faultCode: string, faultString: string, result: Array}}
         */
        syncFulfillmentMagento: function (sessionID, magentoSO, fulfillRec) {
            var responseMagento;
            var magentoSOId = magentoSO.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoId);
            var magentoItemIds = ConnectorCommon.getMagentoItemIds(ConnectorCommon.getFulfillmentItems(fulfillRec));

            // create shipment in Magento
            responseMagento = ConnectorConstants.CurrentWrapper.createFulfillment(sessionID, magentoItemIds, magentoSOId, fulfillRec);

            if (!responseMagento.status) {
                Utility.logDebug('Error', 'Export fulfillment record -- ID: ' + '--' + responseMagento.faultCode + '--' + responseMagento.faultString);
                ErrorLogNotification.logAndNotify({
                    externalSystem: ConnectorConstants.CurrentStore.systemId,
                    recordType: nlapiGetRecordType(),
                    recordId: nlapiGetRecordId(),
                    recordDetail: "NetSuite # " + fulfillRec.getFieldValue("tranid"),
                    action: "Item Fulfillment Export from NetSuite to " + ConnectorConstants.CurrentStore.systemDisplayName,
                    message: "An error occurred while exporting item fulfillment",
                    messageDetails: responseMagento.faultCode + '--' + responseMagento.faultString,
                    status: F3Message.Status.ERROR,
                    externalSystemText: ConnectorConstants.CurrentStore.systemDisplayName,
                    system: "NetSuite"
                });
                return;
            }
            else {
                Utility.logDebug('set magento shipment id', 'Im Setting ID ' + responseMagento.result);
                //nlapiSetFieldValue(ConnectorConstants.Transaction.Fields.MagentoId, responseMagento.result);

                // Check for feature availability
                if (!FeatureVerification.isPermitted(Features.EXPORT_ITEM_FULFILLMENT_TRACKING_INFO, ConnectorConstants.CurrentStore.permissions)) {
                    Utility.logEmergency('FEATURE PERMISSION', Features.EXPORT_ITEM_FULFILLMENT_TRACKING_INFO + ' NOT ALLOWED');
                    return responseMagento;
                }

                var upsPackage = '';
                var totalPackages;
                // packages sublist is generated by carrier / netsuite feature
                if (fulfillRec.getLineItemCount('packageups') > 0) {
                    upsPackage = 'ups';
                }
                if (fulfillRec.getLineItemCount('packagefedex') > 0) {
                    upsPackage = 'fedex';
                }
                if (fulfillRec.getLineItemCount('packageusps') > 0) {
                    upsPackage = 'usps';
                }
                // from SO
                var carrier = magentoSO.getFieldValue('carrier') || magentoSO.getFieldValue('shipcarrier');
                totalPackages = fulfillRec.getLineItemCount('package' + upsPackage);
                var carrierText = magentoSO.getFieldText('shipmethod');

                Utility.logDebug('carrier', carrier);
                Utility.logDebug('totalPackages', totalPackages);
                Utility.logDebug('carrierText', carrierText);
                var havingErrorInTrackingNumberExport = false;
                var errorTrackingNumberStr = "";
                var trackingNumbersIds = [];
                var otherInfo;
                for (var p = 1; p <= totalPackages; p++) {
                    var tracking = fulfillRec.getLineItemValue('package' + upsPackage, 'packagetrackingnumber' + upsPackage, p);
                    if (!Utility.isBlankOrNull(tracking)) {
                        otherInfo = {};
                        otherInfo.auctionId = fulfillRec.getLineItemValue('item', ConnectorConstants.Transaction.Columns.MagentoOrderId, p);
                        otherInfo.itemQty = fulfillRec.getLineItemValue('item', 'quantity', p);

                        var responseTracking = ConnectorConstants.CurrentWrapper.createTracking(responseMagento.result, carrier, carrierText, tracking, sessionID, magentoSOId, otherInfo, fulfillRec);
                        if (!responseTracking.status) {
                            havingErrorInTrackingNumberExport = true;
                            errorTrackingNumberStr += responseTracking.faultString + ' - ' + responseTracking.faultCode;
                        }
                        Utility.logDebug('CHECK', 'I tried setting shipment tracking id Got this in response : ' + responseTracking.result);
                        trackingNumbersIds.push(responseTracking.result);
                    }
                }
                if (havingErrorInTrackingNumberExport) {
                    ErrorLogNotification.logAndNotify({
                        externalSystem: ConnectorConstants.CurrentStore.systemId,
                        recordType: nlapiGetRecordType(),
                        recordId: nlapiGetRecordId(),
                        recordDetail: "NetSuite # " + fulfillRec.getFieldValue("tranid"),
                        action: "Export Tracking Information from NetSuite to " + ConnectorConstants.CurrentStore.systemDisplayName,
                        message: "An error has occurred while exporting tracking numbers of item fulfillment to " + ConnectorConstants.CurrentStore.systemDisplayName,
                        messageDetails: new CustomException({
                            code: F3Message.Action.ITEM_FULFILLMENT_TRACKING_NUMBER_EXPORT,
                            message: errorTrackingNumberStr,
                            recordType: "salesorderitemshipment",
                            recordId: responseMagento.result,
                            system: ConnectorConstants.CurrentStore.systemType,
                            exception: null,
                            action: "Export Tracking Information from NetSuite to " + ConnectorConstants.CurrentStore.systemDisplayName
                        }),
                        status: F3Message.Status.ERROR,
                        externalSystemText: ConnectorConstants.CurrentStore.systemDisplayName,
                        system: "NetSuite"
                    });
                }
                // update tracking ids for future modification in tracking numbers - it is a rare case
                responseMagento.trackingNumbersIdsStr = trackingNumbersIds.join(",");
            }

            return responseMagento;
        }
    };
})();

/**
 * FulfillmentExport class that has the actual functionality of userevent script.
 * All business logic will be encapsulated in this class.
 */
var FulfillmentExport = (function () {
    return {
        /**
         * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
         * @appliedtorecord recordType
         *
         * @param {String} type Operation types: create, edit, view, copy, print, email
         * @param {nlobjForm} form Current form
         * @param {nlobjRequest} request Request object
         * @returns {Void}
         */
        userEventBeforeLoad: function (type, form, request) {
            //TODO: Write Your code here
        },
        /**
         * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
         * @appliedtorecord recordType
         *
         * @param {String} type Operation types: create, edit, delete, xedit
         *                      approve, reject, cancel (SO, ER, Time Bill, PO & RMA only)
         *                      pack, ship (IF)
         *                      markcomplete (Call, Task)
         *                      reassign (Case)
         *                      editforecast (Opp, Estimate)
         * @returns {Void}
         */
        userEventBeforeSubmit: function (type) {
            //TODO: Write Your code here
        },

        /**
         * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
         * @appliedtorecord recordType
         *
         * @param {String} type Operation types: create, edit, delete, xedit,
         *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
         *                      pack, ship (IF only)
         *                      dropship, specialorder, orderitems (PO only)
         *                      paybills (vendor payments)
         * @returns {Void}
         */
        userEventAfterSubmit: function (type) {
            Utility.logDebug("Apex Start Up", "Start");
            try {
                Utility.logDebug("step-01", type);
                // checking license validation
                if (!MC_SYNC_CONSTANTS.isValidLicense()) {
                    Utility.logDebug('Validate', 'License has expired');
                    return;
                }
                Utility.logDebug("step-02", "");
                var rec = nlapiLoadRecord(nlapiGetRecordType(), nlapiGetRecordId(), null);
                var magentoShipmentId = rec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoShipmentId);
                var shipStatus = rec.getFieldValue("shipstatus");

                Utility.logDebug("step-01.1", JSON.stringify([magentoShipmentId, shipStatus]));
                if (!Utility.isBlankOrNull(magentoShipmentId)) {
                    Utility.logDebug("step-01.3", "");
                }
                Utility.logDebug("step-03", "");
                // only executes code when license is valid and type is create
                if (type.toString() === 'create' || type.toString() === 'xedit' || type.toString() === 'ship' || type.toString() === 'pack') {
                    Utility.logDebug("step-04", "");
                    var orderId = rec.getFieldValue('orderid');
                    var recType = ConnectorCommon.getRecordTypeOfTransaction(orderId);

                    // if fulfillment is not creating from sales order then terminate
                    if (recType.toString() !== 'salesorder') {
                        Utility.logDebug("step-04.1", "");
                        return;
                    }
                    Utility.logDebug("step-05", "");
                    var magentoSO = nlapiLoadRecord('salesorder', orderId, null);
                    this.createFulfillmentOrder(magentoSO, rec, type);
                }
                else if (type.toString() === 'edit') {
                    this.updateTrackingInfo(type);
                }
            } catch (e) {
                Utility.logException('startup - afterSubmit', e);
            }
        },
        /**
         *
         * @param magentoSO
         * @param rec
         */
        createFulfillmentOrder: function (magentoSO, rec, type) {
            var salesOrderStore = magentoSO.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoStore);
            var salesOrderMagentoId = magentoSO.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoId);
            var shipStatus = rec.getFieldValue("shipstatus");
            // if not sales order is not synced with magento then terminate
            if (Utility.isBlankOrNull(salesOrderStore) || Utility.isBlankOrNull(salesOrderMagentoId)) {
                Utility.logDebug("step-05.1", "");
                return;
            }
            Utility.logDebug("step-06", "");
            ConnectorConstants.initialize();
            // getting configuration
            var externalSystemConfig = ConnectorConstants.ExternalSystemConfig;
            var sessionID;

            var store = externalSystemConfig[salesOrderStore];
            ConnectorConstants.CurrentStore = store;

            Utility.logDebug("step-06", JSON.stringify(store));
            // if (store.systemId != 2) {
            //     return;
            // }
            // check if status is defined in config
            /*if ((ConnectorConstants.CurrentStore.entitySyncInfo.hasOwnProperty("itemFulfillment") &&
             ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.hasOwnProperty("status") &&
             Utility.isBlankOrNull(ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.status) &&
             type.toString() !== 'create') || ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.status !== shipStatus) {
             Utility.logDebug("step-07", "08");
             return;
             }*/

            if (ConnectorConstants.CurrentStore.entitySyncInfo.hasOwnProperty("itemFulfillment") &&
                ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.hasOwnProperty("status")) {
                if (Utility.isBlankOrNull(ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.status)) {
                    Utility.logDebug("step-07", "01");
                    if (type.toString() !== 'create') {
                        Utility.logDebug("step-07", "02");
                        return;
                    }
                    Utility.logDebug("step-07", "03");
                } else {
                    Utility.logDebug("step-08", "01");
                    if (ConnectorConstants.CurrentStore.entitySyncInfo.itemFulfillment.status !== shipStatus) {
                        Utility.logDebug("step-08", "02");
                        return;
                    }
                }
            } else {
                Utility.logDebug("step-081", "01" + type.toString());
                if (type.toString() !== 'create' && type.toString() !== 'edit') {
                    Utility.logDebug("step-081", "02");
                    return;
                }
            }

            Utility.logDebug("step-09", "");
            // Check for feature availability
            if (!FeatureVerification.isPermitted(Features.EXPORT_ITEM_FULFILLMENT_TO_EXTERNAL_SYSTEM, ConnectorConstants.CurrentStore.permissions)) {
                Utility.logEmergency('FEATURE PERMISSION', Features.EXPORT_ITEM_FULFILLMENT_TO_EXTERNAL_SYSTEM + ' NOT ALLOWED');
                return;
            }
            Utility.logDebug("step-10", "");
            ConnectorConstants.CurrentWrapper = F3WrapperFactory.getWrapper(store.systemType);
            ConnectorConstants.CurrentWrapper.initialize(store);
            sessionID = ConnectorConstants.CurrentWrapper.getSessionIDFromServer(store.userName, store.password);

            // if session id is not captured then terminate
            if (Utility.isBlankOrNull(sessionID)) {
                Utility.logDebug('sessionID', 'sessionID is empty');
                ErrorLogNotification.logAndNotify({
                    externalSystem: ConnectorConstants.CurrentStore.systemId,
                    recordType: nlapiGetRecordType(),
                    recordId: nlapiGetRecordId(),
                    recordDetail: "NetSuite # " + rec.getFieldValue("tranid"),
                    action: "Export Item Fulfillment from NetSuite to " + ConnectorConstants.CurrentStore.systemDisplayName,
                    message: "Unable to fetch Session Id from " + ConnectorConstants.CurrentStore.systemDisplayName,
                    messageDetails: "Look into logs",
                    status: F3Message.Status.ERROR,
                    externalSystemText: ConnectorConstants.CurrentStore.systemDisplayName,
                    system: "NetSuite"
                });
                return;
            }
            Utility.logDebug("step-11", "");
            Utility.logDebug('ConnectorConstants.CurrentStore', JSON.stringify(ConnectorConstants.CurrentStore));
            var response = FulfillmentExportHelper.syncFulfillmentMagento(sessionID, magentoSO, rec);
            Utility.logDebug("step-12", "");
            if (response) {
                Utility.logDebug("step-13", "");
                FulfillmentExportHelper.setShipmentIdInFulfillment(response.result, response.trackingNumbersIdsStr);
            }
            Utility.logDebug("step-14", "");
        },
        updateTrackingInfo: function (type) {
            Utility.logDebug("step-13.3", "");
            var fulfillmentRec = nlapiLoadRecord(nlapiGetRecordType(), nlapiGetRecordId(), null);
            var shipmentId = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoShipmentId);
            var systemId = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoStore);
            var createdFrom = fulfillmentRec.getFieldValue('createdfrom');

            if (!(Utility.isBlankOrNullZeeVersion(shipmentId, systemId, createdFrom))) {
                Utility.logDebug("step-4.1.1", "");
                ConnectorConstants.initialize();
                var salesOrderRec = nlapiLoadRecord('salesorder', createdFrom, null);
                // getting configuration
                var externalSystemConfig = ConnectorConstants.ExternalSystemConfig;
                var sessionID;
                var store = this._getExternalSystemConfig(externalSystemConfig, systemId);
                ConnectorConstants.CurrentStore = store;
                var magentoWrapper = F3WrapperFactory.getWrapper(store.systemType);
                magentoWrapper.initialize(store);
                ConnectorConstants.CurrentWrapper = magentoWrapper;
                sessionID = ConnectorConstants.CurrentWrapper.getSessionIDFromServer(store.userName, store.password);
                // if session id is not captured then terminate
                if (Utility.isBlankOrNull(sessionID)) {
                    // terminate script if session id is not found
                    Utility.logDebug('sessionID', 'sessionID is empty');
                    return;
                }

                this.removeOldTrackingNumbers(fulfillmentRec, sessionID, shipmentId);
                this.addNewTrackingNumbers(fulfillmentRec, salesOrderRec, sessionID, shipmentId);
            }

            else {
                Utility.logDebug("step-5.1.1", "");
                var orderId = fulfillmentRec.getFieldValue('orderid');
                var magentoId = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoId);
                if (magentoId != null || magentoId != '') {
                    Utility.logDebug("step-6.1.1", "");
                    var magentoSO = nlapiLoadRecord('salesorder', orderId, null);
                    this.createFulfillmentOrder(magentoSO, fulfillmentRec, type);
                }

            }

        },

        _getExternalSystemConfig: function (externalSystemConfig, systemId) {
            var s;
            for (var i in externalSystemConfig) {
                var externalSystem = externalSystemConfig[i];
                if (externalSystem.systemId == systemId) {
                    s = externalSystem;
                    break;
                }
            }
            return s;
        },

        removeOldTrackingNumbers: function (fulfillmentRec, sessionID, shipmentId) {
            var shipmentId = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoShipmentId);
            var trackingNumbersIdsStr = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.TrackingNumberIds);

            if (!Utility.isBlankOrNullZeeVersion(trackingNumbersIdsStr)) {
                var trackingNumberIds = trackingNumbersIdsStr.split(",");

                for (var i in trackingNumberIds) {
                    var trackingNumberId = trackingNumberIds[i];
                    Utility.logDebug('REMOVE', 'trackingNumberId : ' + trackingNumberId);
                    if (!Utility.isBlankOrNull(trackingNumberId)) {
                        var trackingXML = ConnectorConstants.CurrentWrapper.removeTrackXML(shipmentId, trackingNumberId, sessionID);
                        var responseTracking = ConnectorConstants.CurrentWrapper.validateRemoveTrackResponse(ConnectorConstants.CurrentWrapper.soapRequestToServer(trackingXML));
                        Utility.logDebug('REMOVE', 'I tried removingg shipment tracking id Got this in response : ' + responseTracking.result);
                    }
                }
            }
        },


        addNewTrackingNumbers: function (fulfillmentRec, salesOrderRec, sessionID, shipmentId) {
            var shipmentId = fulfillmentRec.getFieldValue(ConnectorConstants.Transaction.Fields.MagentoShipmentId);

            var upsPackage = '';
            var totalPackages;

            // packages sublist is generated by carrier / netsuite feature
            if (fulfillmentRec.getLineItemCount('packageups') > 0) {
                upsPackage = 'ups';
            }
            if (fulfillmentRec.getLineItemCount('packagefedex') > 0) {
                upsPackage = 'fedex';
            }

            // from SO
            var carrier = salesOrderRec.getFieldValue('shipcarrier');
            totalPackages = fulfillmentRec.getLineItemCount('package' + upsPackage);
            var carrierText = salesOrderRec.getFieldText('shipmethod');

            Utility.logDebug('addNewTrackingNumbers', 'carrier: ' + carrier + ' totalPackages: ' + totalPackages + ' carrierText: ' + carrierText);

            var trackingNumbersIds = [];

            for (var p = 1; p <= totalPackages; p++) {
                var tracking = fulfillmentRec.getLineItemValue('package' + upsPackage, 'packagetrackingnumber' + upsPackage, p);
                if (!Utility.isBlankOrNull(tracking)) {
                    // Setting Tracking Number
                    var trackingXML = ConnectorConstants.CurrentWrapper.createTrackingXML(shipmentId, carrier, carrierText, tracking, sessionID);
                    var responseTracking = ConnectorConstants.CurrentWrapper.validateTrackingCreateResponse(ConnectorConstants.CurrentWrapper.soapRequestToServer(trackingXML));
                    Utility.logDebug('CHECK', 'I tried setting shipment tracking id Got this in response : ' + responseTracking.result);
                    trackingNumbersIds.push(responseTracking.result);
                }
            }

            // update tracking ids for future modification in tracking numbers - it is a rare cases
            var trackingNumbersIdsStr = trackingNumbersIds.join(",");
            fulfillmentRec.setFieldValue(ConnectorConstants.Transaction.Fields.TrackingNumberIds, trackingNumbersIdsStr);
            nlapiSubmitRecord(fulfillmentRec);
        }

    };
})();

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @param {String} type Operation types: create, edit, view, copy, print, email
 * @param {nlobjForm} form Current form
 * @param {nlobjRequest} request Request object
 * @returns {Void}
 */
function FulfillmentExportBeforeLoad(type, form, request) {
    return FulfillmentExport.userEventBeforeLoad(type, form, request);
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @param {String} type Operation types: create, edit, delete, xedit
 *                      approve, reject, cancel (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF)
 *                      markcomplete (Call, Task)
 *                      reassign (Case)
 *                      editforecast (Opp, Estimate)
 * @returns {Void}
 */
function FulfillmentExportBeforeSubmit(type) {
    return FulfillmentExport.userEventBeforeSubmit(type);
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @param {String} type Operation types: create, edit, delete, xedit,
 *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF only)
 *                      dropship, specialorder, orderitems (PO only)
 *                      paybills (vendor payments)
 * @returns {Void}
 */
function FulfillmentExportAfterSubmit(type) {
    return FulfillmentExport.userEventAfterSubmit(type);
}
