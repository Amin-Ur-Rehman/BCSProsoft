"use strict";

function AlertsController(e) {
    e.labels = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'],

    e.series = ['Series A'],

    e.data = [
        [65, 59, 80, 81, 56, 55, 40]
    ]
}

angular.module("f3UC").controller("AlertsController", ["$scope", AlertsController]);




function MasterController(e, $http, f3Store, $scope, f3Utility) {
    console.log('MasterController();');

    var o = 992;
    var viewModel = this;


    // <jq-grid config="viewModel.salesorders.config" data="viewModel.salesorders.data"></jq-grid>
    viewModel.salesorders = {
        loading: false,
        data: [],
        hasData: !!this.data,
        loadData: function(options){

            options = options || {};
            viewModel.salesorders.loading = true;
            var apiUrl = location.href.replace(location.hash, '') + '&method=getSalesOrders';
            apiUrl = f3Utility.updateQS(apiUrl, 'store_id', f3Store.id);

            $http.get(apiUrl)
                .success(function(response) {
                    console.log('response: ', response);
                    viewModel.salesorders.loading = false;

                    options.limit = options.limit || response.length;
                    var filtered = Array.prototype.slice.call(response, 0, options.limit);

                    viewModel.salesorders.data = filtered;
                    viewModel.salesorders.hasData = !!filtered;
                });
        }
    };


    viewModel.customers = {
            loading: false,
            data: [],
            hasData: !!this.data,
            loadData: function(options){

                options = options || {};
                viewModel.customers.loading = true;
                var apiUrl = location.href.replace(location.hash, '') + '&method=getCustomers';
                apiUrl = f3Utility.updateQS(apiUrl, 'store_id', f3Store.id);

                $http.get(apiUrl)
                    .success(function(response) {
                        console.log('response: ', response);
                        viewModel.customers.loading = false;

                        options.limit = options.limit || response.length;
                    var filtered = Array.prototype.slice.call(response, 0, options.limit);
                    
                        viewModel.customers.data = filtered;
                        viewModel.customers.hasData = !!filtered;
                    });
            }
        };


    viewModel.items = {
            loading: false,
            data: [],
            hasData: !!this.data,
            loadData: function(options){

                options = options || {};
                viewModel.items.loading = true;
                var apiUrl = location.href.replace(location.hash, '') + '&method=getItems';
                apiUrl = f3Utility.updateQS(apiUrl, 'store_id', f3Store.id);

                $http.get(apiUrl)
                    .success(function(response) {
                        console.log('response: ', response);
                        viewModel.items.loading = false;

                        options.limit = options.limit || response.length;
                        var filtered = Array.prototype.slice.call(response, 0, options.limit);
                    
                        viewModel.items.data = filtered;
                        viewModel.items.hasData = !!filtered;
                    });
            }
        };


    viewModel.graphs = {};
    viewModel.graphs.customers = {
        loading: false,
        data: [],
        hasData: !!this.data,
        loadData: function(options){

            $scope.options = options || {};
            viewModel.graphs.customers.loading = true;
            var apiUrl = location.href.replace(location.hash, '') + '&method=getCustomersGraph';
            apiUrl = f3Utility.updateQS(apiUrl, 'store_id', f3Store.id);

            $http.get(apiUrl)
                .success(function(response) {
                    console.log('viewModel.graphs.customers.response: ', response);
                    viewModel.graphs.customers.loading = false;

                    $scope.options.limit = $scope.options.limit || response.length;
                    var filtered = Array.prototype.slice.call(response, 0, $scope.options.limit);

                    viewModel.graphs.customers.data = filtered;
                    viewModel.graphs.customers.hasData = !!filtered;

                    // drawing table and bar chart : start
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Customer');
                    data.addColumn('number', 'Top Sales');
                    data.addRows(filtered.length);

                    for (var i in filtered) {
                        var custData = filtered[i];
                        data.setCell(parseInt(i), 0, custData.altname || custData.entityid);
                        data.setCell(parseInt(i), 1, parseFloat(custData.amount));
                    }

                    var formatter = new google.visualization.NumberFormat({prefix: '$'});
                    formatter.format(data, 1); // Apply formatter to second column

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0, 1]);

                    var table = new google.visualization.Table(document.getElementById('customers_top_sales_table'));
                    table.draw(view, {width: '100%', height: '100%'});

                    var chart = new google.visualization.BarChart(document.getElementById('customers_top_sales_bar_chart'));
                    chart.draw(view);

                    google.visualization.events.addListener(table, 'sort',
                        function (event) {
                            data.sort([{column: event.column, desc: !event.ascending}]);
                            chart.draw(view);
                        });
                    // drawing table and bar chart : start
                });
        }
    };

    viewModel.graphs.dataSyncFrequency = {
        loading: false,
        data: [],
        hasData: !!this.data,
        loadData: function () {
            viewModel.graphs.dataSyncFrequency.loading = false;
            viewModel.graphs.dataSyncFrequency.hasData = true;
            debugger;
            // https://developers.google.com/chart/interactive/docs/gallery/piechart
            var data = google.visualization.arrayToDataTable([
                ['Entity', 'Frequency'],
                ['Customers', parseFloat(viewModel.customerCount || 0)],
                ['Sales Orders', parseFloat(viewModel.salesOrderCount || 0)],
                ['Items', parseFloat(viewModel.itemCount || 0)]
            ]);

            var chartOptions = {
                title: 'Synced Data',
                is3D: true,
                pieSliceText: 'value'
            };

            var chart = new google.visualization.PieChart(document.getElementById('data_sync_frequency'));
            chart.draw(data, chartOptions);
        }
    };
    viewModel.salesOrderCountFlag = false;
    viewModel.customerCountFlag = false;
    viewModel.itemCountFlag = false;

    viewModel.salesOrderCount = 0,
    viewModel.customerCount = 0,
    viewModel.itemCount = 0,

    viewModel.failedSalesOrders = [],

    // viewModel.getWidth = function () {
    //     return window.innerWidth
    // },

    // $scope.$watch(viewModel.getWidth, function (g, n) {
    //     viewModel.toggle = g >= o ? angular.isDefined(e.get("toggle")) ? e.get("toggle") ? !0 : !1 : !0 : !1
    // }),


    viewModel.toggle  = true;
    viewModel.toggleSidebar = function () {
        viewModel.toggle = !viewModel.toggle, e.put("toggle", viewModel.toggle);
    },

    // window.onresize = function () {
    //     $scope.$apply()
    // },

    viewModel.getCustomersCount = function() {
        console.log('get customers called');
        return 888;
    },

    viewModel.getSalesOrderCount = function() {
        //console.log('get getSalesOrderCount called');
        //
        //var apiUrl = location.href.replace(location.hash, '') + '&method=getSalesOrderCount';
        //$http.get(apiUrl)
        //    .success(function(response) {
        //        t.salesOrderCount = response[0].internalid;
        //    });

    },

    viewModel.getItemsCount = function() {
        console.log('get getItemsCount called');
        return 888;
    };


    var apiUrl = location.href.replace(location.hash, '') + '&method=getSalesOrderCount&store_id='+f3Store.id;
    $http.get(apiUrl)
        .success(function(response) {
            viewModel.salesOrderCount = response[0].internalid;
            viewModel.salesOrderCountFlag = true;
            if (viewModel.salesOrderCountFlag && viewModel.customerCountFlag && viewModel.itemCountFlag) {
                viewModel.graphs.dataSyncFrequency.loadData();
            }
        });

    apiUrl = location.href.replace(location.hash, '') + '&method=getCustomersCount&store_id='+f3Store.id;
    $http.get(apiUrl)
        .success(function(response) {
            viewModel.customerCount = response[0].internalid;
            viewModel.customerCountFlag = true;
            if (viewModel.salesOrderCountFlag && viewModel.customerCountFlag && viewModel.itemCountFlag) {
                viewModel.graphs.dataSyncFrequency.loadData();
            }
        });

    apiUrl = location.href.replace(location.hash, '') + '&method=getItemsCount&store_id='+f3Store.id;
    $http.get(apiUrl)
        .success(function(response) {
            viewModel.itemCount = response[0].internalid;
            viewModel.itemCountFlag = true;
            if (viewModel.salesOrderCountFlag && viewModel.customerCountFlag && viewModel.itemCountFlag) {
                viewModel.graphs.dataSyncFrequency.loadData();
            }
        });

    apiUrl = location.href.replace(location.hash, '') + '&method=getFailedSalesOrders&store_id='+f3Store.id;
    $http.get(apiUrl)
        .success(function(response) {
            viewModel.failedSalesOrders = response;
        });
}

angular.module("f3UC").controller("MasterController", ["$cookieStore", "$http", 'f3Store', '$scope', 'f3Utility', MasterController]);



function rdLoading() {
    var d = {
        restrict: "AE",
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return d
}
angular.module("f3UC").directive("rdLoading", rdLoading);

function rdWidgetBody() {
    var d = {
        requires: "^rdWidget",
        scope: {
            loading: "@?",
            classes: "@?"
        },
        transclude: !0,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: "E"
    };
    return d
}
angular.module("f3UC").directive("rdWidgetBody", rdWidgetBody);

function rdWidgetFooter() {
    var e = {
        requires: "^rdWidget",
        transclude: !0,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: "E"
    };
    return e
}
angular.module("f3UC").directive("rdWidgetFooter", rdWidgetFooter);

function rdWidgetTitle() {
    var i = {
        requires: "^rdWidget",
        scope: {
            title: "@",
            icon: "@"
        },
        transclude: !0,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: "E"
    };
    return i
}
angular.module("f3UC").directive("rdWidgetHeader", rdWidgetTitle);

function rdWidget() {
    var d = {
        transclude: !0,
        template: '<div class="widget" ng-transclude></div>',
        restrict: "EA"
    };
    return d
}
angular.module("f3UC").directive("rdWidget", rdWidget);